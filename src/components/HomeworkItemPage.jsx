// üõ°Ô∏è Project: LearningPortal
// üìÖ Created: 2025
// üë§ Author: Dmitriy P.A.
// üîí Proprietary Code ‚Äì do not copy without permission.

import React, { useEffect, useState } from "react";
import { useParams, useNavigate, Link } from "react-router-dom";
import axios from "axios";
import Loading from "./Loading";
import "./styles/HomeworkItemPage.css";
import { toast } from "react-toastify";
import { motion } from "framer-motion";

const HomeworkItemPage = ({ user, apiUrl, token }) => {
  const { id } = useParams();
  const [homework, setHomework] = useState({});
  const [loading, setLoading] = useState(true);
  const [submissionLoading, setSubmissionLoading] = useState(true);
  const [editMode, setEditMode] = useState(false);
  const [form, setForm] = useState({ title: "", description: "" });

  const [submissionText, setSubmissionText] = useState("");
  const [submissionFile, setSubmissionFile] = useState([]);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [mySubmission, setMySubmission] = useState(null);
  const [submissionsList, setSubmissionsList] = useState([]);
  const [selectedSubmission, setSelectedSubmission] = useState(null);
  const [selectedSubmissionGrade, setSelectedSubmissionGrade] = useState(null);

  const [isChecking, setIsChecking] = useState(false);
  const [aiResultVisible, setAiResultVisible] = useState(false);
  const [editingGrade, setEditingGrade] = useState(null);
  const [editedScore, setEditedScore] = useState("");
  const [editingManualGrade, setEditingManualGrade] = useState(null);
  const [manualGradeValue, setManualGradeValue] = useState("");

  const navigate = useNavigate();

  const fetchHomework = async () => {
    try {
      const res = await axios.get(`${apiUrl}/api/homework/${id}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setHomework(res.data);
      setForm({
        title: res.data.subject,
        description: res.data.description,
      });
      console.log(res.data);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –î–ó");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchHomework();
  }, [id, apiUrl, token]);

  const fetchSubmission = async () => {
    setSubmissionLoading(true);
    try {
      if (user.role === "student") {
        try {
          const res = await axios.get(
            `${apiUrl}/api/submission/my/${homework._id}`,
            {
              headers: { Authorization: `Bearer ${token}` },
            }
          );
          setMySubmission(res.data);
          console.log(res.data);
        } catch (err) {
          if (err.response?.status === 404) {
            setMySubmission(null);
          } else {
            toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–¥–∞—á–∏");
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–¥–∞—á–∏:", err);
          }
        }
      } else {
        const res = await axios.get(
          `${apiUrl}/api/submission/by-homework/${homework._id}`,
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        );
        setSubmissionsList(res.data);
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–¥–∞—á:", err);
    } finally {
      setSubmissionLoading(false);
    }
  };

  useEffect(() => {
    if (homework._id) {
      fetchSubmission();
    }
  }, [homework, token, apiUrl]);

  const handleUpdate = async () => {
    try {
      await axios.patch(`${apiUrl}/api/homework/${id}`, form, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setHomework((prev) => ({ ...prev, ...form }));
      setEditMode(false);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –î–ó:", err);
    }
  };

  const uploadFilesToCloudinary = async (files) => {
    const uploadedUrls = [];

    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      const formData = new FormData();
      formData.append("homeworkSubmission", file);

      toast.info(`–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ ${i + 1} –∏–∑ ${files.length}...`, {
        autoClose: 1000,
      });

      const res = await axios.post(
        `${apiUrl}/api/submission/upload-submission`,
        formData,
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "multipart/form-data",
          },
        }
      );

      res.data.files.forEach((f) => {
        uploadedUrls.push(f.url);
      });
    }
    return uploadedUrls;
  };

  const handleSubmitHomework = async () => {
    if (!submissionText && submissionFile.length === 0) {
      toast.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª!");
      return;
    }
    if (!homework._id) {
      toast.error("–û—à–∏–±–∫–∞: ID –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }
    try {
      setIsSubmitting(true);

      let fileUrls = [];
      if (submissionFile.length > 0) {
        fileUrls = await uploadFilesToCloudinary(submissionFile);
      }

      await axios.post(
        `${apiUrl}/api/submission`,
        {
          homeworkId: homework._id,
          text: submissionText,
          fileUrls,
        },
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      toast.success("–†–∞–±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!");
      setSubmissionText("");
      setSubmissionFile([]);
      await fetchSubmission();
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞–±–æ—Ç—ã:", err);
      toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞–±–æ—Ç—ã");
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleFileChange = (e) => {
    const files = Array.from(e.target.files);
    setSubmissionFile(files);
  };

  const handleCheckAI = async () => {
    if (!mySubmission?._id) return;
    try {
      setIsChecking(true);
      const res = await axios.post(
        `${apiUrl}/api/submission/check-ai`,
        { submissionId: mySubmission._id },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      toast.success("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
      setMySubmission((prev) => ({
        ...prev,
        aiResult: res.data.result,
        checkedByAi: true,
        aiCheckedAt: new Date(),
      }));
      setTimeout(() => setAiResultVisible(true), 300);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ò–ò:", err);
      toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ");
    } finally {
      setIsChecking(false);
    }
  };

  const handleEditAiGrade = (submission) => {
    setEditingGrade(submission);
    setEditedScore(submission.aiResult?.score?.toString() || "");
  };

  const handleEditGrade = (submission) => {
    setEditingManualGrade(submission);
    setManualGradeValue(submission.grade?.toString() || "");
  };

  const handleSubmitToJournal = async (submission) => {
    try {
      console.log(submission);
      await axios.post(
        `${apiUrl}/api/submission/${submission._id}/grade`,
        {},
        { headers: { Authorization: `Bearer ${token}` } }
      );
      toast.success("–û—Ü–µ–Ω–∫–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –∂—É—Ä–Ω–∞–ª");
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ü–µ–Ω–∫–∏ –≤ –∂—É—Ä–Ω–∞–ª:", err);
      toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É");
    }
  };

  if (loading) return <Loading />;
  if (!homework)
    return (
      <div className="hw-error-page">
        –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∑
        <button onClick={() => navigate(-1)} className="back-button">
          –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
        </button>
      </div>
    );

  return (
    <div className="hw-container">
      <button onClick={() => navigate(-1)} className="back-button">
        –ù–∞–∑–∞–¥
      </button>

      {editMode ? (
        <div className="hw-editmode">
          <input
            type="text"
            value={form.title}
            onChange={(e) => setForm((f) => ({ ...f, title: e.target.value }))}
          />
          <textarea
            value={form.description}
            onChange={(e) =>
              setForm((f) => ({ ...f, description: e.target.value }))
            }
          />
          <div className="edit-buttons-container">
            <button onClick={handleUpdate}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
            <button onClick={() => setEditMode(false)}>–û—Ç–º–µ–Ω–∞</button>
          </div>
        </div>
      ) : (
        <div className="hw-info">
          <div className="hw-info-header">
            <h1>{homework.subject.name}</h1>
            <h3>{new Date(homework.date).toLocaleDateString()}</h3>
          </div>
          <div className="hw-about">
            <p className="hw-teacher">
              –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:{" "}
              <Link
                to={`/profile/${homework.createdBy?._id}`}
                className="hw-author"
              >
                {homework.createdBy?.username}
              </Link>
            </p>
            <h3>{new Date(homework.createdAt).toLocaleDateString()}</h3>
          </div>
          <p className="hw-description">{homework.description}</p>

          {homework.files && homework.files.length > 0 && (
            <div className="hw-files">
              <p>–§–∞–π–ª—ã:</p>
              <ul className="hw-files-list">
                {homework.files.map((file, index) => (
                  <a
                    key={index}
                    href={file}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="file-link"
                  >
                    üìé –§–∞–π–ª {index + 1}
                  </a>
                ))}
              </ul>
            </div>
          )}

          {(user.role === "teacher" || user.role === "director") && (
            <button onClick={() => setEditMode(true)}>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
          )}
        </div>
      )}

      {/* –°–î–ê–ß–ê –î–û–ú–ê–®–ö–ò */}
      {user.role === "student" && submissionLoading ? (
        <Loading />
      ) : user.role === "student" && !submissionLoading && !mySubmission ? (
        <div className="homework-submission">
          <h3>–°–¥–∞—Ç—å –î–ó</h3>
          <textarea
            placeholder="–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞..."
            value={submissionText}
            onChange={(e) => setSubmissionText(e.target.value)}
          />
          <input
            type="file"
            accept="application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,image/*"
            multiple
            onChange={handleFileChange}
          />
          <button
            onClick={handleSubmitHomework}
            disabled={isSubmitting}
            className="submit-homework-button"
          >
            {isSubmitting ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"}
          </button>
          {submissionFile.length > 0 && (
            <div className="file-preview-container">
              {submissionFile.map((file, idx) => (
                <div key={idx} className="file-preview">
                  üìÑ {file.name}
                </div>
              ))}
            </div>
          )}
        </div>
      ) : user.role === "student" && mySubmission ? (
        <div className="your-submission">
          <p>{mySubmission.text || "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"}</p>
          {mySubmission.fileUrls?.length > 0 && (
            <div className="submitted-files">
              {mySubmission.fileUrls.map((url, idx) => (
                <a
                  key={idx}
                  href={url}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="file-download-card"
                >
                  üìé –§–∞–π–ª {idx + 1}
                </a>
              ))}
            </div>
          )}
          <p>üìÖ –°–¥–∞–Ω–æ: {new Date(mySubmission.createdAt).toLocaleString()}</p>
          {!mySubmission.aiResult && !mySubmission.grade && !isChecking && (
            <>
              {user.premium?.isActive ? (
                <button onClick={handleCheckAI} className="ai-check-button">
                  ‚ú® –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –ò–ò
                </button>
              ) : (
                <a
                  href="/premium"
                  onClick={() =>
                    toast.info(
                      "–ò–ò –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∫–∞ —Ç–æ–ª—å–∫–æ –ü—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!"
                    )
                  }
                >
                  <button className="ai-check-button" style={{ color: "#888" }}>
                    ‚ú® –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –ò–ò
                  </button>
                </a>
              )}
            </>
          )}

          {isChecking && (
            <motion.div
              className="ai-checking-block"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 0.5 }}
            >
              <motion.div
                className="glow-box"
                animate={{
                  boxShadow: ["0 0 0px #00f", "0 0 20px #00f", "0 0 0px #00f"],
                }}
                transition={{ repeat: Infinity, duration: 1.5 }}
              >
                <p className="checking-text">–ü—Ä–æ–≤–µ—Ä–∫–∞...</p>
              </motion.div>
            </motion.div>
          )}

          {mySubmission.aiResult && mySubmission.checkedByAi && (
            <div className="ai-result-block">
              <h4>‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞</h4>
              <div>–û—Ü–µ–Ω–∫–∞: {mySubmission.aiResult.score}</div>
              <motion.div
                initial="hidden"
                animate="visible"
                variants={{
                  hidden: {},
                  visible: {
                    transition: {
                      staggerChildren: 0.03,
                    },
                  },
                }}
                className="ai-comment"
              >
                {mySubmission.aiResult.comment.split("").map((char, idx) => (
                  <motion.span
                    key={idx}
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    transition={{ duration: 0.05 }}
                  >
                    {char}
                  </motion.span>
                ))}
              </motion.div>
            </div>
          )}
        </div>
      ) : null}

      {/* –ü–†–û–°–ú–û–¢–† –°–î–ê–ß –£ –£–ß–ò–¢–ï–õ–Ø/–î–ò–†–ï–ö–¢–û–†–ê */}
      {user.role !== "student" && submissionsList.length > 0 && (
        <div className="submission-list">
          <h3 style={{ margin: "10px auto" }}>–†–∞–±–æ—Ç—ã —É—á–∞—â–∏—Ö—Å—è</h3>
          <table className="submission-table">
            <thead>
              <tr>
                <th>–£—á–µ–Ω–∏–∫</th>
                <th>–û—Ç–≤–µ—Ç</th>
                <th>–§–∞–π–ª</th>
                <th>–û—Ü–µ–Ω–∫–∞</th>
              </tr>
            </thead>
            <tbody>
              {submissionsList.map((sub) => (
                <tr key={sub._id}>
                  <td>
                    <Link to={`/profile/${sub.studentId._id}`}>
                      {sub.studentId?.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç"}
                    </Link>
                  </td>
                  <td>
                    {sub.text && (
                      <button
                        className="open-homework-text-button"
                        onClick={() => setSelectedSubmission(sub)}
                      >
                        üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ—Å—å –æ—Ç–≤–µ—Ç
                      </button>
                    )}
                  </td>
                  <td>
                    {sub.fileUrls?.length > 0
                      ? sub.fileUrls.map((file, idx) => (
                          <a
                            key={idx}
                            href={file}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="download-button"
                          >
                            üìé –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª {idx + 1}
                          </a>
                        ))
                      : "‚Äî"}
                  </td>
                  <td>
                    {sub.grade ? (
                      <button
                        className="open-grade-editor-button"
                        onClick={() => handleEditGrade(sub)}
                      >
                        {sub.grade}
                      </button>
                    ) : sub.aiResult?.score ? (
                      <button
                        className="open-ai-comment-button"
                        onClick={() => setSelectedSubmissionGrade(sub)}
                      >
                        {sub.aiResult.score}
                      </button>
                    ) : (
                      <button
                        className="open-grade-editor-button"
                        onClick={() => handleEditGrade(sub)}
                      >
                        ‚Äî
                      </button>
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {selectedSubmissionGrade && (
        <div
          className="submission-modal-overlay"
          onClick={() => setSelectedSubmissionGrade(null)}
        >
          <div
            className="submission-modal-content"
            onClick={(e) => e.stopPropagation()}
          >
            <h4>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ò–ò</h4>
            <div className="submission-text">
              {selectedSubmissionGrade.aiResult.comment}
            </div>
            <div className="modal-buttons">
              <button
                className="close-modal-button"
                onClick={() => setSelectedSubmissionGrade(null)}
              >
                ‚úñ –ó–∞–∫—Ä—ã—Ç—å
              </button>
              <button
                className="change-grade-button"
                onClick={() => {
                  setSelectedSubmissionGrade(null);
                  handleEditAiGrade(selectedSubmissionGrade);
                }}
              >
                ‚úè –ò–∑–º–µ–Ω–∏—Ç—å
              </button>
              <button
                className="accept-grade-button"
                onClick={() => handleSubmitToJournal(selectedSubmissionGrade)}
              >
                ‚úÖ –ü–æ—Å—Ç–∞–≤–∏—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}

      {editingGrade && (
        <div
          className="submission-modal-overlay"
          onClick={() => setEditingGrade(null)}
        >
          <div
            className="submission-modal-content"
            onClick={(e) => e.stopPropagation()}
          >
            <h4>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –ò–ò</h4>
            <div style={{ marginBottom: "10px" }}>
              <label>–û—Ü–µ–Ω–∫–∞:</label>
              <input
                type="number"
                value={editedScore}
                onChange={(e) => setEditedScore(e.target.value)}
                min={2}
                max={5}
              />
            </div>
            <div className="modal-buttons">
              <button
                className="accept-grade-button"
                onClick={async () => {
                  try {
                    const response = await axios.patch(
                      `${apiUrl}/api/submission/${editingGrade._id}/edit-score`,
                      { newScore: parseInt(editedScore) },
                      { headers: { Authorization: `Bearer ${token}` } }
                    );
                    const updated = { ...editingGrade };
                    updated.aiResult.score = parseInt(editedScore);
                    setSelectedSubmissionGrade(updated);
                    setEditingGrade(null);
                    toast.success("–û—Ü–µ–Ω–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
                  } catch (err) {
                    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏:", err);
                    toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É");
                  }
                }}
              >
                üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </button>
              <button
                className="close-modal-button"
                onClick={() => setEditingGrade(null)}
              >
                ‚úñ –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
      )}

      {editingManualGrade && (
        <div
          className="submission-modal-overlay"
          onClick={() => setEditingManualGrade(null)}
        >
          <div
            className="submission-modal-content"
            onClick={(e) => e.stopPropagation()}
          >
            <h4>–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É –≤—Ä—É—á–Ω—É—é</h4>
            <div style={{ marginBottom: "10px" }}>
              <label>–û—Ü–µ–Ω–∫–∞:</label>
              <input
                type="number"
                value={manualGradeValue}
                onChange={(e) => setManualGradeValue(e.target.value)}
                min={2}
                max={5}
              />
            </div>
            <div className="modal-buttons">
              <button
                className="close-modal-button"
                onClick={() => setEditingManualGrade(null)}
              >
                ‚úñ –û—Ç–º–µ–Ω–∞
              </button>
              <button
                className="accept-grade-button"
                onClick={async () => {
                  try {
                    const response = await axios.patch(
                      `${apiUrl}/api/submission/${editingManualGrade._id}/grade`,
                      { value: parseInt(manualGradeValue) },
                      { headers: { Authorization: `Bearer ${token}` } }
                    );
                    const updated = { ...editingManualGrade };
                    updated.grade = parseInt(manualGradeValue);
                    setEditingManualGrade(null);
                    toast.success("–û—Ü–µ–Ω–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
                    setSubmissionsList((prev) =>
                      prev.map((s) =>
                        s._id === editingManualGrade._id
                          ? { ...s, grade: updated.grade }
                          : s
                      )
                    );
                  } catch (err) {
                    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏:", err);
                    toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É");
                  }
                }}
              >
                üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </button>

              <button
                className="accept-grade-button"
                onClick={() => handleSubmitToJournal(editingManualGrade)}
              >
                ‚úÖ –ü–æ—Å—Ç–∞–≤–∏—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}

      {selectedSubmission && (
        <div
          className="submission-modal-overlay"
          onClick={() => setSelectedSubmission(null)}
        >
          <div
            className="submission-modal-content"
            onClick={(e) => e.stopPropagation()}
          >
            <h4>–û—Ç–≤–µ—Ç —É—á–∞—â–µ–≥–æ—Å—è</h4>
            <div className="submission-text">{selectedSubmission.text}</div>
            <button
              className="close-modal-button"
              onClick={() => setSelectedSubmission(null)}
            >
              ‚úñ –ó–∞–∫—Ä—ã—Ç—å
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default HomeworkItemPage;
